'use strict';
// https://github.com/facebook/create-react-app/blob/next/packages/react-dev-utils/WebpackDevServerUtils.js

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const express = require('express');
const WebpackDevMiddleware = require('webpack-dev-middleware');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
console.log(process.env.PORT);
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

const app = express();

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    // const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    // Serve webpack assets generated by the compiler over a web sever.
    const compiler = webpack(config);
    compiler.watch({
      aggregateTimeout: 1000, // in ms
      // 将多个更改聚合到单个重构建(rebuild)
  
      poll: true,
      poll: 500, // 间隔单位 ms
      // 启用轮询观察模式
      // 必须用在不通知更改的文件系统中
      // 即 nfs shares（译者注：Network FileSystem，最大的功能就是可以透過網路，讓不同的機器、不同的作業系統、可以彼此分享個別的檔案 ( share file )）
    },function (err, stats) {
      if (err) {
        console.log(err);
      }
      console.log('compile success');
    });
    // handle fallback for HTML5 history API
    // app.use(require('connect-history-api-fallback')())
    // serve webpack bundle output
    // app.use(devMiddleware)
    // devMiddleware.waitUntilValid(() => {
    //   process.env.PORT = port;
    //   console.log('> Listening at ' + port + '\n');
      // app.listen(3000);
    //   console.log(chalk.cyan('Starting the development server...\n'));
    // });
    // const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    // devServer.listen(port, HOST, err => {
    //   if (err) {
    //     return console.log(err);
    //   }
    //   if (isInteractive) {
    //     // clearConsole();
    //   }
    //   console.log(chalk.cyan('Starting the development server...\n'));
    //   openBrowser(urls.localUrlForBrowser);
    // });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        // devServer.close();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
